; Function to create a binary search tree node with 3 values: value, left subtree, right subtree
(fun (make-node value left right)
  (tuple value left right))

; Function to insert an element into a binary search tree
(fun (insert value tree)
  (if (< value (index 0 tree))
    (make-node (index 0 tree) (insert value (index 1 tree)) (index 2 tree))
    (if (> value (index 0 tree))
      (make-node (index 0 tree) (index 1 tree) (insert value (index 2 tree)))
      tree)))

; Function to check if an element exists in a binary search tree
(fun (contains? value tree)
  (if tree
    (let ((node-value (index 0 tree))
          (left-tree (index 1 tree))
          (right-tree (index 2 tree)))
      (if (= value node-value)
        true
        (if (< value node-value)
          (contains? value left-tree)
          (contains? value right-tree))))
    false))

; Test: Create a binary search tree, insert an element, and check if it exists in the tree
(let ((tree (make-node 5 nil nil)))
  (set! tree (insert 3 tree))
  (set! tree (insert 7 tree))
  (set! tree (insert 1 tree))
  (set! tree (insert 9 tree))
  (print (contains? 3 tree))) ; Check if 3 is in the tree

