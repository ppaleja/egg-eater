; Function to create a binary search tree node with 3 values: value, left subtree, right subtree
(fun (make_node value left right)
  (tuple value left right))

; Function to insert an element into a binary search tree
(fun (insert value tree)
  (if (< value (index 1 tree))
    (make_node (index 1 tree) (insert value (index 2 tree)) (index 3 tree))
    (if (> value (index 1 tree))
      (make_node (index 1 tree) (index 2 tree) (insert value (index 3 tree)))
      tree)))

; Function to check if an element exists in a binary search tree
(fun (contains? value tree)
  (if tree
    (let (node_value (index 1 tree)) (
      let (left_tree (index 2 tree)) (
        let (right_tree (index 3 tree)) (
          if (= value node_value)
          true
          (if (< value node_value)
            (contains? value left_tree)
            (contains? value right_tree))
        )
      )
    ))
    false
  )
)

; Test: Create a binary search tree, insert an element, and check if it exists in the tree
(let (tree (make_node 5 nil nil)) (block
  (set! tree (insert 3 tree))
  (set! tree (insert 7 tree))
  (set! tree (insert 1 tree))
  (set! tree (insert 9 tree))
  (print (contains? 3 tree))) ; Check if 3 is in the tree

)
