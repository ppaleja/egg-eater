; Function to create a binary search tree node with 3 values: value, left subtree, right subtree
(fun (make_node value left right)
  (tuple value left right))


(fun (insert value tree)
  (if (= tree nil)
    (make_node value nil nil)
    (if (< value (index tree 1))
      (make_node (index tree 1) (insert value (index tree 2)) (index tree 3))
      (if (> value (index tree 1))
        (make_node (index tree 1) (index tree 2) (insert value (index tree 3)))
        tree
      )
    )
  )
)

; Function to check if an element exists in a binary search tree
(fun (contains? value tree)
  (if (= tree nil)
    false
    (let (node_value (index tree 1)) (
      let (left_tree (index tree 2)) (
        let (right_tree (index tree 3)) (
          if (= value node_value)
          true
          (if (< value node_value)
            (contains? value left_tree)
            (contains? value right_tree))
        )
      )
    ))
  )
)


; Test: Create a binary search tree, insert an element, and check if it exists in the tree
(let (tree (print (make_node 5 nil nil))) (block
  (print (set! tree (insert 7 tree)))
  (print (set! tree (insert 3 tree)))
  (print (set! tree (insert 1 tree)))
  (print (set! tree (insert 9 tree)))
  (print (contains? 5 tree))
  (print (contains? 3 tree))
  (print (contains? 9 tree))
  (print (contains? 4 tree))
  (print (contains? 0 tree))
))
